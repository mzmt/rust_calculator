{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2","program":"/Users/mizumotoryouhei/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","rand_core","/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts","--crate-type","lib","--emit=dep-info,metadata,link","-C","debuginfo=2","--cfg","feature=\"alloc\"","--cfg","feature=\"std\"","-C","metadata=7c0889c1f42fc486","-C","extra-filename=-7c0889c1f42fc486","--out-dir","/Users/mizumotoryouhei/Desktop/rust_calculator/target/rls/debug/deps","-L","dependency=/Users/mizumotoryouhei/Desktop/rust_calculator/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/Users/mizumotoryouhei/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/mizumotoryouhei/Desktop/rust_calculator/target/rls/debug/deps/librand_core-7c0889c1f42fc486.rmeta"},"prelude":{"crate_id":{"name":"rand_core","disambiguator":[15995719103059012230,3715180031505569479]},"crate_root":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src","external_crates":[{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[12480940028815742386,17133840292323062676]}},{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[12740277115278631702,12640810556085455126]}},{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[9032649326521538135,12667967411968509476]}},{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[10009283058736322418,8662397509334631840]}},{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[3924216512132021142,13433065908605684942]}},{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[3030377414627030993,4885163689723098329]}},{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[13235301763130876389,11956675772311029582]}},{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[5839480494490908876,4697973287732230237]}},{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[1041246640194432752,18216372201816767321]}},{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[4759184321302818619,12022396673976004994]}},{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[1295962249923865998,4753204618089216455]}},{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[11309261669264167917,12633313349437080871]}},{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[11563747115584760512,7975991426192958756]}},{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[2660116328215505580,9545010463301493925]}}],"span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/lib.rs","byte_start":408,"byte_end":18940,"line_start":10,"line_end":477,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":166},"span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/lib.rs","byte_start":2029,"byte_end":2038,"line_start":53,"line_end":53,"column_start":17,"column_end":26},"alias_span":null,"name":"ErrorKind","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":188},"span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/lib.rs","byte_start":2040,"byte_end":2045,"line_start":53,"line_end":53,"column_start":28,"column_end":33},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/lib.rs","byte_start":408,"byte_end":18940,"line_start":10,"line_end":477,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/lib.rs","parent":null,"children":[{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":19},{"krate":0,"index":41},{"krate":0,"index":105},{"krate":0,"index":127},{"krate":0,"index":132},{"krate":0,"index":137},{"krate":0,"index":138},{"krate":0,"index":146},{"krate":0,"index":153},{"krate":0,"index":159},{"krate":0,"index":161},{"krate":0,"index":164}],"decl_id":null,"docs":" Random number generation traits","sig":null,"attributes":[{"value":"deny(missing_docs)","span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/lib.rs","byte_start":1387,"byte_end":1409,"line_start":34,"line_end":34,"column_start":1,"column_end":23}},{"value":"deny(missing_debug_implementations)","span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/lib.rs","byte_start":1410,"byte_end":1449,"line_start":35,"line_end":35,"column_start":1,"column_end":40}}]},{"kind":"TupleVariant","id":{"krate":0,"index":167},"span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/error.rs","byte_start":19814,"byte_end":19825,"line_start":26,"line_end":26,"column_start":5,"column_end":16},"name":"Unavailable","qualname":"::error::ErrorKind::Unavailable","value":"ErrorKind::Unavailable","parent":{"krate":0,"index":166},"children":[],"decl_id":null,"docs":" Feature is not available; not recoverable.\n \n This is the most permanent failure type and implies the error cannot be\n resolved simply by retrying (e.g. the feature may not exist in this\n build of the application or on the current platform).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":169},"span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/error.rs","byte_start":20241,"byte_end":20251,"line_start":35,"line_end":35,"column_start":5,"column_end":15},"name":"Unexpected","qualname":"::error::ErrorKind::Unexpected","value":"ErrorKind::Unexpected","parent":{"krate":0,"index":166},"children":[],"decl_id":null,"docs":" General failure; there may be a chance of recovery on retry.\n \n This is the catch-all kind for errors from known and unknown sources\n which do not have a more specific kind / handling method.\n \n It is suggested to retry a couple of times or retry later when\n handling; some error sources may be able to resolve themselves,\n although this is not likely.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":171},"span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/error.rs","byte_start":20497,"byte_end":20506,"line_start":40,"line_end":40,"column_start":5,"column_end":14},"name":"Transient","qualname":"::error::ErrorKind::Transient","value":"ErrorKind::Transient","parent":{"krate":0,"index":166},"children":[],"decl_id":null,"docs":" A transient failure which likely can be resolved or worked around.\n \n This error kind exists for a few specific cases where it is known that\n the error likely can be resolved internally, but is reported anyway.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":173},"span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/error.rs","byte_start":20861,"byte_end":20869,"line_start":47,"line_end":47,"column_start":5,"column_end":13},"name":"NotReady","qualname":"::error::ErrorKind::NotReady","value":"ErrorKind::NotReady","parent":{"krate":0,"index":166},"children":[],"decl_id":null,"docs":" Not ready yet: recommended to try again a little later.\n \n This error kind implies the generator needs more time or needs some\n other part of the application to do something else first before it is\n ready for use; for example this may be used by external generators\n which require time for initialization.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":175},"span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/error.rs","byte_start":20894,"byte_end":20909,"line_start":49,"line_end":49,"column_start":5,"column_end":20},"name":"__Nonexhaustive","qualname":"::error::ErrorKind::__Nonexhaustive","value":"ErrorKind::__Nonexhaustive","parent":{"krate":0,"index":166},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":166},"span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/error.rs","byte_start":19520,"byte_end":19529,"line_start":20,"line_end":20,"column_start":10,"column_end":19},"name":"ErrorKind","qualname":"::error::ErrorKind","value":"ErrorKind::{Unavailable, Unexpected, Transient, NotReady, __Nonexhaustive}","parent":null,"children":[{"krate":0,"index":167},{"krate":0,"index":169},{"krate":0,"index":171},{"krate":0,"index":173},{"krate":0,"index":175}],"decl_id":null,"docs":" Error kind which can be matched over.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":24},"span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/error.rs","byte_start":21049,"byte_end":21061,"line_start":56,"line_end":56,"column_start":12,"column_end":24},"name":"should_retry","qualname":"<ErrorKind>::should_retry","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" True if this kind of error may resolve itself on retry.\n \n See also `should_wait()`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":25},"span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/error.rs","byte_start":21252,"byte_end":21263,"line_start":63,"line_end":63,"column_start":12,"column_end":23},"name":"should_wait","qualname":"<ErrorKind>::should_wait","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" True if we should retry but wait before retrying\n \n This implies `should_retry()` is true.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":26},"span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/error.rs","byte_start":21379,"byte_end":21390,"line_start":68,"line_end":68,"column_start":12,"column_end":23},"name":"description","qualname":"<ErrorKind>::description","value":"fn (self) -> &'static str","parent":null,"children":[],"decl_id":null,"docs":" A description of this error kind\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":188},"span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/error.rs","byte_start":22258,"byte_end":22263,"line_start":89,"line_end":89,"column_start":12,"column_end":17},"name":"Error","qualname":"::error::Error","value":"Error { kind, msg }","parent":null,"children":[{"krate":0,"index":189},{"krate":0,"index":190},{"krate":0,"index":191}],"decl_id":null,"docs":" Error type of random number generators\n \n This is a relatively simple error type, designed for compatibility with and\n without the Rust `std` library. It embeds a \"kind\" code, a message (static\n string only), and an optional chained cause (`std` only). The `kind` and\n `msg` fields can be accessed directly; cause can be accessed via\n `std::error::Error::cause` or `Error::take_cause`. Construction can only be\n done via `Error::new` or `Error::with_cause`.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":189},"span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/error.rs","byte_start":22297,"byte_end":22301,"line_start":91,"line_end":91,"column_start":9,"column_end":13},"name":"kind","qualname":"::error::Error::kind","value":"error::ErrorKind","parent":{"krate":0,"index":188},"children":[],"decl_id":null,"docs":" The error kind\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":190},"span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/error.rs","byte_start":22348,"byte_end":22351,"line_start":93,"line_end":93,"column_start":9,"column_end":12},"name":"msg","qualname":"::error::Error::msg","value":"&'static str","parent":{"krate":0,"index":188},"children":[],"decl_id":null,"docs":" The error message\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":28},"span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/error.rs","byte_start":22534,"byte_end":22537,"line_start":100,"line_end":100,"column_start":12,"column_end":15},"name":"new","qualname":"<Error>::new","value":"fn (kind: ErrorKind, msg: &'static str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new instance, with specified kind and a message.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":29},"span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/error.rs","byte_start":23232,"byte_end":23242,"line_start":119,"line_end":119,"column_start":12,"column_end":22},"name":"with_cause","qualname":"<Error>::with_cause","value":"fn <E> (kind: ErrorKind, msg: &'static str, cause: E) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new instance, with specified kind, message, and a\n chained cause.\n \n Note: `stdError` is an alias for `std::error::Error`.\n \n If not targetting `std` (i.e. `no_std`), this function is replaced by\n another with the same prototype, except that there are no bounds on the\n type `E` (because both `Box` and `stdError` are unavailable), and the\n `cause` is ignored.\n","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/error.rs","byte_start":23199,"byte_end":23220,"line_start":118,"line_end":118,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":31},"span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/error.rs","byte_start":23904,"byte_end":23914,"line_start":137,"line_end":137,"column_start":12,"column_end":22},"name":"take_cause","qualname":"<Error>::take_cause","value":"fn (&mut self) -> Option<Box<stdError + Send + Sync>>","parent":null,"children":[],"decl_id":null,"docs":" Take the cause, if any. This allows the embedded cause to be extracted.\n This uses `Option::take`, leaving `self` with no cause.\n","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/error.rs","byte_start":23871,"byte_end":23892,"line_start":136,"line_end":136,"column_start":5,"column_end":26}}]},{"kind":"Mod","id":{"krate":0,"index":41},"span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/block.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"block","qualname":"::block","value":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/block.rs","parent":null,"children":[{"krate":0,"index":42},{"krate":0,"index":43},{"krate":0,"index":46},{"krate":0,"index":51},{"krate":0,"index":54},{"krate":0,"index":194},{"krate":0,"index":199},{"krate":0,"index":58},{"krate":0,"index":61},{"krate":0,"index":67},{"krate":0,"index":74},{"krate":0,"index":202},{"krate":0,"index":208},{"krate":0,"index":81},{"krate":0,"index":84},{"krate":0,"index":90},{"krate":0,"index":96},{"krate":0,"index":103}],"decl_id":null,"docs":" The `BlockRngCore` trait and implementation helpers","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":54},"span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/block.rs","byte_start":27211,"byte_end":27223,"line_start":63,"line_end":63,"column_start":11,"column_end":23},"name":"BlockRngCore","qualname":"::block::BlockRngCore","value":"BlockRngCore","parent":null,"children":[{"krate":0,"index":55},{"krate":0,"index":56},{"krate":0,"index":57}],"decl_id":null,"docs":" A trait for RNGs which do not generate random numbers individually, but in\n blocks (typically `[u32; N]`). This technique is commonly used by\n cryptographic RNGs to improve performance.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":55},"span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/block.rs","byte_start":27277,"byte_end":27281,"line_start":65,"line_end":65,"column_start":10,"column_end":14},"name":"Item","qualname":"::block::BlockRngCore::Item","value":"type Item;","parent":{"krate":0,"index":54},"children":[],"decl_id":null,"docs":" Results element type, e.g. `u32`.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":56},"span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/block.rs","byte_start":27438,"byte_end":27445,"line_start":69,"line_end":69,"column_start":10,"column_end":17},"name":"Results","qualname":"::block::BlockRngCore::Results","value":"type Results: AsRef<[Self::Item]> + AsMut<[Self::Item]> + Default;","parent":{"krate":0,"index":54},"children":[],"decl_id":null,"docs":" Results type. This is the 'block' an RNG implementing `BlockRngCore`\n generates, which will usually be an array like `[u32; 16]`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":57},"span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/block.rs","byte_start":27549,"byte_end":27557,"line_start":72,"line_end":72,"column_start":8,"column_end":16},"name":"generate","qualname":"::block::BlockRngCore::generate","value":"fn (&mut self, results: &mut Self::Results) -> ()","parent":{"krate":0,"index":54},"children":[],"decl_id":null,"docs":" Generate a new block of results.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":194},"span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/block.rs","byte_start":29574,"byte_end":29582,"line_start":113,"line_end":113,"column_start":12,"column_end":20},"name":"BlockRng","qualname":"::block::BlockRng","value":"BlockRng { core }","parent":null,"children":[{"krate":0,"index":196},{"krate":0,"index":197},{"krate":0,"index":198}],"decl_id":null,"docs":" A wrapper type implementing [`RngCore`] for some type implementing\n [`BlockRngCore`] with `u32` array buffer; i.e. this can be used to implement\n a full RNG from just a `generate` function.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":198},"span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/block.rs","byte_start":29736,"byte_end":29740,"line_start":117,"line_end":117,"column_start":9,"column_end":13},"name":"core","qualname":"::block::BlockRng::core","value":"R","parent":{"krate":0,"index":194},"children":[],"decl_id":null,"docs":" The *core* part of the RNG, implementing the `generate` function.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":63},"span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/block.rs","byte_start":30350,"byte_end":30353,"line_start":135,"line_end":135,"column_start":12,"column_end":15},"name":"new","qualname":"<BlockRng<R>>::new","value":"fn (core: R) -> BlockRng<R>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `BlockRng` from an existing RNG implementing\n `BlockRngCore`. Results will be generated on first use.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/block.rs","byte_start":30329,"byte_end":30338,"line_start":134,"line_end":134,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/block.rs","byte_start":30828,"byte_end":30833,"line_start":150,"line_end":150,"column_start":12,"column_end":17},"name":"index","qualname":"<BlockRng<R>>::index","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the index into the result buffer.","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/block.rs","byte_start":30799,"byte_end":30816,"line_start":149,"line_end":149,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":65},"span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/block.rs","byte_start":31024,"byte_end":31029,"line_start":157,"line_end":157,"column_start":12,"column_end":17},"name":"reset","qualname":"<BlockRng<R>>::reset","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reset the number of available results.\n This will force a new set of results to be generated on next use.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/block.rs","byte_start":31003,"byte_end":31012,"line_start":156,"line_end":156,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":66},"span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/block.rs","byte_start":31222,"byte_end":31238,"line_start":164,"line_end":164,"column_start":12,"column_end":28},"name":"generate_and_set","qualname":"<BlockRng<R>>::generate_and_set","value":"fn (&mut self, index: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Generate a new set of results immediately, setting the index to the\n given value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/block.rs","byte_start":31201,"byte_end":31210,"line_start":163,"line_end":163,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":202},"span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/block.rs","byte_start":35173,"byte_end":35183,"line_start":284,"line_end":284,"column_start":12,"column_end":22},"name":"BlockRng64","qualname":"::block::BlockRng64","value":"BlockRng64 { core }","parent":null,"children":[{"krate":0,"index":204},{"krate":0,"index":205},{"krate":0,"index":206},{"krate":0,"index":207}],"decl_id":null,"docs":" A wrapper type implementing [`RngCore`] for some type implementing\n [`BlockRngCore`] with `u64` array buffer; i.e. this can be used to implement\n a full RNG from just a `generate` function.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":207},"span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/block.rs","byte_start":35410,"byte_end":35414,"line_start":289,"line_end":289,"column_start":9,"column_end":13},"name":"core","qualname":"::block::BlockRng64::core","value":"R","parent":{"krate":0,"index":202},"children":[],"decl_id":null,"docs":" The *core* part of the RNG, implementing the `generate` function.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":86},"span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/block.rs","byte_start":36078,"byte_end":36081,"line_start":308,"line_end":308,"column_start":12,"column_end":15},"name":"new","qualname":"<BlockRng64<R>>::new","value":"fn (core: R) -> BlockRng64<R>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `BlockRng` from an existing RNG implementing\n `BlockRngCore`. Results will be generated on first use.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/block.rs","byte_start":36057,"byte_end":36066,"line_start":307,"line_end":307,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":87},"span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/block.rs","byte_start":36590,"byte_end":36595,"line_start":324,"line_end":324,"column_start":12,"column_end":17},"name":"index","qualname":"<BlockRng64<R>>::index","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the index into the result buffer.","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/block.rs","byte_start":36561,"byte_end":36578,"line_start":323,"line_end":323,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":88},"span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/block.rs","byte_start":36786,"byte_end":36791,"line_start":331,"line_end":331,"column_start":12,"column_end":17},"name":"reset","qualname":"<BlockRng64<R>>::reset","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reset the number of available results.\n This will force a new set of results to be generated on next use.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/block.rs","byte_start":36765,"byte_end":36774,"line_start":330,"line_end":330,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":89},"span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/block.rs","byte_start":37016,"byte_end":37032,"line_start":339,"line_end":339,"column_start":12,"column_end":28},"name":"generate_and_set","qualname":"<BlockRng64<R>>::generate_and_set","value":"fn (&mut self, index: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Generate a new set of results immediately, setting the index to the\n given value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/block.rs","byte_start":36995,"byte_end":37004,"line_start":338,"line_end":338,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":105},"span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/impls.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"impls","qualname":"::impls","value":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/impls.rs","parent":null,"children":[{"krate":0,"index":106},{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":110},{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":114},{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":121},{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":125}],"decl_id":null,"docs":" Helper functions for implementing `RngCore` functions.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":112},"span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/impls.rs","byte_start":40936,"byte_end":40952,"line_start":29,"line_end":29,"column_start":8,"column_end":24},"name":"next_u64_via_u32","qualname":"::impls::next_u64_via_u32","value":"fn <R> (rng: &mut R) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Implement `next_u64` via `next_u32`, little-endian order.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":114},"span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/impls.rs","byte_start":41499,"byte_end":41518,"line_start":42,"line_end":42,"column_start":8,"column_end":27},"name":"fill_bytes_via_next","qualname":"::impls::fill_bytes_via_next","value":"fn <R> (rng: &mut R, dest: &mut [u8]) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Implement `fill_bytes` via `next_u64` and `next_u32`, little-endian order.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":121},"span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/impls.rs","byte_start":44379,"byte_end":44398,"line_start":137,"line_end":137,"column_start":8,"column_end":27},"name":"fill_via_u32_chunks","qualname":"::impls::fill_via_u32_chunks","value":"fn (src: &[u32], dest: &mut [u8]) -> (usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Implement `fill_bytes` by reading chunks from the output buffer of a block\n based RNG.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":122},"span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/impls.rs","byte_start":44924,"byte_end":44943,"line_start":151,"line_end":151,"column_start":8,"column_end":27},"name":"fill_via_u64_chunks","qualname":"::impls::fill_via_u64_chunks","value":"fn (src: &[u64], dest: &mut [u8]) -> (usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Implement `fill_bytes` by reading chunks from the output buffer of a block\n based RNG.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":123},"span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/impls.rs","byte_start":45108,"byte_end":45125,"line_start":156,"line_end":156,"column_start":8,"column_end":25},"name":"next_u32_via_fill","qualname":"::impls::next_u32_via_fill","value":"fn <R> (rng: &mut R) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Implement `next_u32` via `fill_bytes`, little-endian order.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":125},"span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/impls.rs","byte_start":45281,"byte_end":45298,"line_start":161,"line_end":161,"column_start":8,"column_end":25},"name":"next_u64_via_fill","qualname":"::impls::next_u64_via_fill","value":"fn <R> (rng: &mut R) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Implement `next_u64` via `fill_bytes`, little-endian order.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":127},"span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/le.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"le","qualname":"::le","value":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/le.rs","parent":null,"children":[{"krate":0,"index":128},{"krate":0,"index":129},{"krate":0,"index":130},{"krate":0,"index":131}],"decl_id":null,"docs":" Little-Endian utilities\n \n Little-Endian order has been chosen for internal usage; this makes some\n useful functions available.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":130},"span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/le.rs","byte_start":46447,"byte_end":46460,"line_start":35,"line_end":35,"column_start":8,"column_end":21},"name":"read_u32_into","qualname":"::le::read_u32_into","value":"fn (src: &[u8], dst: &mut [u32]) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reads unsigned 32 bit integers from `src` into `dst`.\n Borrowed from the `byteorder` crate.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/le.rs","byte_start":46430,"byte_end":46439,"line_start":34,"line_end":34,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":131},"span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/le.rs","byte_start":46648,"byte_end":46661,"line_start":42,"line_end":42,"column_start":8,"column_end":21},"name":"read_u64_into","qualname":"::le::read_u64_into","value":"fn (src: &[u8], dst: &mut [u64]) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reads unsigned 64 bit integers from `src` into `dst`.\n Borrowed from the `byteorder` crate.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/le.rs","byte_start":46631,"byte_end":46640,"line_start":41,"line_end":41,"column_start":1,"column_end":10}}]},{"kind":"Trait","id":{"krate":0,"index":132},"span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/lib.rs","byte_start":5295,"byte_end":5302,"line_start":138,"line_end":138,"column_start":11,"column_end":18},"name":"RngCore","qualname":"::RngCore","value":"RngCore","parent":null,"children":[{"krate":0,"index":133},{"krate":0,"index":134},{"krate":0,"index":135},{"krate":0,"index":136}],"decl_id":null,"docs":" The core of a random number generator.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":133},"span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/lib.rs","byte_start":5611,"byte_end":5619,"line_start":145,"line_end":145,"column_start":8,"column_end":16},"name":"next_u32","qualname":"::RngCore::next_u32","value":"fn (&mut self) -> u32","parent":{"krate":0,"index":132},"children":[],"decl_id":null,"docs":" Return the next random `u32`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":134},"span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/lib.rs","byte_start":5957,"byte_end":5965,"line_start":153,"line_end":153,"column_start":8,"column_end":16},"name":"next_u64","qualname":"::RngCore::next_u64","value":"fn (&mut self) -> u64","parent":{"krate":0,"index":132},"children":[],"decl_id":null,"docs":" Return the next random `u64`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":135},"span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/lib.rs","byte_start":6738,"byte_end":6748,"line_start":169,"line_end":169,"column_start":8,"column_end":18},"name":"fill_bytes","qualname":"::RngCore::fill_bytes","value":"fn (&mut self, dest: &mut [u8]) -> ()","parent":{"krate":0,"index":132},"children":[],"decl_id":null,"docs":" Fill `dest` with random data.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":136},"span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/lib.rs","byte_start":7475,"byte_end":7489,"line_start":184,"line_end":184,"column_start":8,"column_end":22},"name":"try_fill_bytes","qualname":"::RngCore::try_fill_bytes","value":"fn (&mut self, dest: &mut [u8]) -> Result<(), Error>","parent":{"krate":0,"index":132},"children":[],"decl_id":null,"docs":" Fill `dest` entirely with random data.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":137},"span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/lib.rs","byte_start":8778,"byte_end":8787,"line_start":209,"line_end":209,"column_start":11,"column_end":20},"name":"CryptoRng","qualname":"::CryptoRng","value":"CryptoRng","parent":null,"children":[],"decl_id":null,"docs":" A marker trait used to indicate that an [`RngCore`] or [`BlockRngCore`]\n implementation is supposed to be cryptographically secure.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":138},"span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/lib.rs","byte_start":9237,"byte_end":9248,"line_start":221,"line_end":221,"column_start":11,"column_end":22},"name":"SeedableRng","qualname":"::SeedableRng","value":"SeedableRng: Sized","parent":null,"children":[{"krate":0,"index":139},{"krate":0,"index":140},{"krate":0,"index":141},{"krate":0,"index":144}],"decl_id":null,"docs":" A random number generator that can be explicitly seeded.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":139},"span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/lib.rs","byte_start":10766,"byte_end":10770,"line_start":267,"line_end":267,"column_start":10,"column_end":14},"name":"Seed","qualname":"::SeedableRng::Seed","value":"type Seed: Sized + Default + AsMut<[u8]>;","parent":{"krate":0,"index":138},"children":[],"decl_id":null,"docs":" Seed type, which is restricted to types mutably-dereferencable as `u8`\n arrays (we recommend `[u8; N]` for some `N`).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":140},"span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/lib.rs","byte_start":12055,"byte_end":12064,"line_start":290,"line_end":290,"column_start":8,"column_end":17},"name":"from_seed","qualname":"::SeedableRng::from_seed","value":"fn (seed: Self::Seed) -> Self","parent":{"krate":0,"index":138},"children":[],"decl_id":null,"docs":" Create a new PRNG using the given seed.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":141},"span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/lib.rs","byte_start":12881,"byte_end":12894,"line_start":306,"line_end":306,"column_start":8,"column_end":21},"name":"seed_from_u64","qualname":"::SeedableRng::seed_from_u64","value":"fn (mut state: u64) -> Self","parent":{"krate":0,"index":138},"children":[],"decl_id":null,"docs":" Create a new PRNG using a `u64` seed.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":144},"span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/lib.rs","byte_start":15589,"byte_end":15597,"line_start":363,"line_end":363,"column_start":8,"column_end":16},"name":"from_rng","qualname":"::SeedableRng::from_rng","value":"fn <R> (mut rng: R) -> Result<Self, Error>","parent":{"krate":0,"index":138},"children":[],"decl_id":null,"docs":" Create a new PRNG seeded from another `Rng`.","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/error.rs","byte_start":20919,"byte_end":20928,"line_start":52,"line_end":52,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":26}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/error.rs","byte_start":22449,"byte_end":22454,"line_start":98,"line_end":98,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":31}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/error.rs","byte_start":24024,"byte_end":24029,"line_start":142,"line_end":142,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":33}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/error.rs","byte_start":24432,"byte_end":24437,"line_start":155,"line_end":155,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":35},{"krate":0,"index":36}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/error.rs","byte_start":24660,"byte_end":24665,"line_start":166,"line_end":166,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":39}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/block.rs","byte_start":29877,"byte_end":29885,"line_start":121,"line_end":121,"column_start":51,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":60}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/block.rs","byte_start":30181,"byte_end":30189,"line_start":131,"line_end":131,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":66}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/block.rs","byte_start":31448,"byte_end":31456,"line_start":171,"line_end":171,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":72},{"krate":0,"index":73}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/block.rs","byte_start":33578,"byte_end":33586,"line_start":239,"line_end":239,"column_start":53,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":76},{"krate":0,"index":77},{"krate":0,"index":78},{"krate":0,"index":79}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/block.rs","byte_start":35551,"byte_end":35561,"line_start":293,"line_end":293,"column_start":51,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":83}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/block.rs","byte_start":35907,"byte_end":35917,"line_start":304,"line_end":304,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":86},{"krate":0,"index":87},{"krate":0,"index":88},{"krate":0,"index":89}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/block.rs","byte_start":37274,"byte_end":37284,"line_start":347,"line_end":347,"column_start":45,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":92},{"krate":0,"index":93},{"krate":0,"index":94},{"krate":0,"index":95}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/block.rs","byte_start":39308,"byte_end":39318,"line_start":414,"line_end":414,"column_start":53,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":101}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/block.rs","byte_start":39756,"byte_end":39764,"line_start":433,"line_end":433,"column_start":49,"column_end":57},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/lib.rs","byte_start":16703,"byte_end":16706,"line_start":399,"line_end":399,"column_start":39,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/lib.rs","byte_start":17196,"byte_end":17203,"line_start":422,"line_end":422,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":160}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/lib.rs","byte_start":17596,"byte_end":17599,"line_start":434,"line_end":434,"column_start":43,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/lib.rs","byte_start":2069,"byte_end":2074,"line_start":57,"line_end":57,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":41}},{"kind":"Mod","span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/lib.rs","byte_start":2084,"byte_end":2089,"line_start":58,"line_end":58,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":105}},{"kind":"Mod","span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/lib.rs","byte_start":2099,"byte_end":2101,"line_start":59,"line_end":59,"column_start":9,"column_end":11},"ref_id":{"krate":0,"index":127}}],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/error.rs","byte_start":20919,"byte_end":20928,"line_start":52,"line_end":52,"column_start":6,"column_end":15},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":166},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/error.rs","byte_start":22449,"byte_end":22454,"line_start":98,"line_end":98,"column_start":6,"column_end":11},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":188},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/error.rs","byte_start":24024,"byte_end":24029,"line_start":142,"line_end":142,"column_start":23,"column_end":28},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":188},"to":{"krate":2,"index":7578}},{"span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/error.rs","byte_start":24432,"byte_end":24437,"line_start":155,"line_end":155,"column_start":19,"column_end":24},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":188},"to":{"krate":1,"index":1625}},{"span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/error.rs","byte_start":24660,"byte_end":24665,"line_start":166,"line_end":166,"column_start":26,"column_end":31},"kind":{"Impl":{"id":4}},"from":{"krate":1,"index":2486},"to":{"krate":2,"index":2227}},{"span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/block.rs","byte_start":29877,"byte_end":29885,"line_start":121,"line_end":121,"column_start":51,"column_end":59},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":194},"to":{"krate":2,"index":7573}},{"span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/block.rs","byte_start":30181,"byte_end":30189,"line_start":131,"line_end":131,"column_start":23,"column_end":31},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":194},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/block.rs","byte_start":31448,"byte_end":31456,"line_start":171,"line_end":171,"column_start":45,"column_end":53},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":194},"to":{"krate":0,"index":132}},{"span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/block.rs","byte_start":33578,"byte_end":33586,"line_start":239,"line_end":239,"column_start":53,"column_end":61},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":194},"to":{"krate":0,"index":138}},{"span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/block.rs","byte_start":35551,"byte_end":35561,"line_start":293,"line_end":293,"column_start":51,"column_end":61},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":202},"to":{"krate":2,"index":7573}},{"span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/block.rs","byte_start":35907,"byte_end":35917,"line_start":304,"line_end":304,"column_start":23,"column_end":33},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":202},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/block.rs","byte_start":37274,"byte_end":37284,"line_start":347,"line_end":347,"column_start":45,"column_end":55},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":202},"to":{"krate":0,"index":132}},{"span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/block.rs","byte_start":39308,"byte_end":39318,"line_start":414,"line_end":414,"column_start":53,"column_end":63},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":202},"to":{"krate":0,"index":138}},{"span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/block.rs","byte_start":39756,"byte_end":39764,"line_start":433,"line_end":433,"column_start":49,"column_end":57},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":194},"to":{"krate":0,"index":137}},{"span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/lib.rs","byte_start":9250,"byte_end":9255,"line_start":221,"line_end":221,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":2,"index":1543},"to":{"krate":0,"index":138}},{"span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/lib.rs","byte_start":16703,"byte_end":16706,"line_start":399,"line_end":399,"column_start":39,"column_end":42},"kind":{"Impl":{"id":14}},"from":{"krate":5,"index":90},"to":{"krate":0,"index":132}},{"span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/lib.rs","byte_start":17196,"byte_end":17203,"line_start":422,"line_end":422,"column_start":24,"column_end":31},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":132},"to":{"krate":1,"index":2860}},{"span":{"file_name":"/Users/mizumotoryouhei/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.2/src/lib.rs","byte_start":17596,"byte_end":17599,"line_start":434,"line_end":434,"column_start":43,"column_end":46},"kind":{"Impl":{"id":16}},"from":{"krate":5,"index":90},"to":{"krate":0,"index":137}}]}